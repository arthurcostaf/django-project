criando o perfil para um usuário, modificando o arquivo models.py do users e o arquivo admin.py
admin.py

from .models import Profile

admin.site.register(Profile)


models.py

from django.db import models
from django.contrib.auth.models import User

class Profile (models.Model):
    user =models.OneToOneField(User, on_delete=models.CASCADE)
    image= models.ImageField(default= 'default.jpg', upload_to='profile_pics')

    def __str__(self):
        return f'{self.user.username} Profile'

fazer as migrações , antes disso baixar o pillow pip install pillow , python manage.py makemigrations,
python manage.py migrate

utilizar o python shell pra ver o que foi criado, manage.py shell
associar o usuário à variável user
user=User.objects.filter(username='saulo').first()
user.profile(perfil)
user.profile.image(diretorio da imagem)
user.profile.image.width

mudar o profile.html

criar um arquivo signals.py para ser criado um perfil sem contato com admingpage, automaticamente

from django.db.models.signals import post_save
from django.contrib.auth.models import User
from django.dispatch import receiver
from .models import Profile

@receiver(post_save, sender=User)
def create_profile(sender, instance, created, **kwargs):
    if created: 
        Profile.objects.create(user=instance)

@receiver(post_save, sender=User)
def save_profile(sender, instance, created, **kwargs):
    instance.profile.save()

quando cria-se um usuário (salvo) é enviado um sinal que é recebido (receiver) que é uma função de criar o perfil
ou salvar o perfil.

acrescentar em apps.py do users

def ready(self):
        import users.signals


